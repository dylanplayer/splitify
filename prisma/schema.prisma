generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  guest         Guest?
  accounts      Account[]
  sessions      Session[]
  receipts      Receipt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  phone     String
  userId    String? @unique

  receipts         Receipt[]
  receiptGuestItem ReceiptGuestItem[]
  followers        Guest[] @relation("GuestFollows")
  following        Guest[] @relation("GuestFollows")
  user             User?   @relation(fields: [userId], references: [id])

  @@unique([phone])
}

model Receipt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  date      DateTime
  userId    String

  guests      Guest[]
  items       ReceiptItem[]
  fees        ReceiptFee[]
  guestItems  ReceiptGuestItem[]
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReceiptItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  price     Float
  qty       Int
  receiptId String

  receipt          Receipt            @relation(fields: [receiptId], references: [id])
  ReceiptGuestItem ReceiptGuestItem[]
}

model ReceiptFee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  price     Float
  receiptId String

  receipt Receipt @relation(fields: [receiptId], references: [id])
}

model ReceiptGuestItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  receiptId String
  guestId   String
  itemId    String

  receipt Receipt     @relation(fields: [receiptId], references: [id])
  guest   Guest       @relation(fields: [guestId], references: [id])
  item    ReceiptItem @relation(fields: [itemId], references: [id])
}
